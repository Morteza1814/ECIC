#include "ooo_cpu.h"
#include <bits/stdc++.h>
#define HistorySize 32*1024
// #include <vector>
// #include <map>
// #include <set>
// #include <list>
// #include <iostream>
// #include <fstream>
#include <boost/iostreams/filtering_stream.hpp>
#include <boost/iostreams/filter/gzip.hpp>
#include <boost/tokenizer.hpp>
#include <boost/scoped_ptr.hpp>
#include <boost/optional.hpp>
#include <boost/none.hpp>
#include <boost/lambda/lambda.hpp>
#include <boost/lambda/bind.hpp>
#include <boost/utility.hpp>
#include <boost/multi_index/member.hpp>
#include <boost/none.hpp>
#include <boost/multi_index_container.hpp>
#include <boost/multi_index/hashed_index.hpp>
#include <boost/multi_index/composite_key.hpp>
#include <boost/multi_index/ordered_index.hpp>
#include <boost/multi_index/sequenced_index.hpp>
#include <boost/multi_index/identity.hpp>
#include <boost/multi_index/member.hpp>
#include <boost/shared_ptr.hpp>
#include <boost/optional.hpp>
#include <sys/types.h>
// #include <unistd.h>
// #include <time.h>
#include <boost/format.hpp>
// #include <bitset>
// #include <cmath>

//#define PIF_INF
//#define PIF_CIRC
#define PIF_CIRC_IND

//#define overpredict
//#define headindex

namespace nPIF {

using namespace boost::multi_index;
using namespace std;
using namespace boost;

typedef uint64_t MemoryAddress;

int regionSize = 8;
int spatialOffset = 0; // position of the first block accessed in a region
int theLookahead = 5;
//int theLookahead = 3;
int theTrackerSize = 12;
int theCompactorSize = 18;//6;
int theStreamCount = 3;
int theBlockSize = 64;
int theBlockOffsetSize = (int) log2(theBlockSize);
uint64_t theBlockMask = ~(theBlockSize - 1);
//morteza parameters
uint64_t morteza_history_read_cntr=0;
uint64_t morteza_history_write_cntr=0;
uint64_t morteza_compactor_read_cntr=0;
uint64_t morteza_compactor_write_cntr=0;
uint64_t morteza_index_read_cntr=0;
uint64_t morteza_index_write_cntr=0;
uint64_t morteza_sab_read_cntr=0;
uint64_t morteza_sab_write_cntr=0;

struct IndexEntry {
	uint64_t key;
	uint64_t value;

	IndexEntry() {
		key = 0;
		value = 0;
	};

	IndexEntry(uint64_t k, uint64_t v) {
		key = k;
		value = v;
	};
};

struct Index {
	int theAssoc;
	int theSets;

	uint64_t theSetMask;

	typedef map<uint64_t, list<IndexEntry*> > IndexTable;
	typedef map<uint64_t, list<IndexEntry*> >::iterator IndexIter;

	typedef list<IndexEntry*>::iterator SetIter;

	IndexTable theIndex;

	Index(int sets, int assoc) {
		theSets = sets;
		theAssoc = assoc;
		theSetMask = sets - 1;
		for (int i = 0; i < theSets; i++) {
			for (int j = 0; j < theAssoc; j++) {
				theIndex[i].push_back(new IndexEntry);
			}
		}
	};

	optional<uint64_t> find(uint64_t key) {
		uint64_t set = (key >> theBlockOffsetSize) & theSetMask;
		for (SetIter it = theIndex[set].begin(); it != theIndex[set].end(); it++) {
			IndexEntry* entry = *it;
			if (entry->key == key) {
				uint64_t value = entry->value;
				morteza_index_read_cntr++;
				//move to MRU
				theIndex[set].splice(theIndex[set].begin(), theIndex[set], it);
				assert(theIndex[set].size() == (uint64_t) theAssoc);
				//return the pointer
				return value;
			}
		}
		return none;
	};

	void insert(uint64_t key, uint64_t value) {
		uint64_t set = (key >> theBlockOffsetSize) & theSetMask;
		for (SetIter it = theIndex[set].begin(); it != theIndex[set].end(); it++) {
			IndexEntry* entry = *it;
			if (entry->key == key) {
				entry->value = value;
				//move to MRU
				theIndex[set].splice(theIndex[set].begin(), theIndex[set], it);
				assert(theIndex[set].size() == (uint64_t) theAssoc);
				return;
			}
		}
		theIndex[set].push_front(new IndexEntry(key, value));
		theIndex[set].pop_back();
		assert(theIndex[set].size() == (uint64_t) theAssoc);
	};

	void saveLog(std::ostream & s) {
		s << theSets << "\n";
//        for(IndexIter it = theIndex.begin(); it != theIndex.end(); it++){
//          s << it->first << " " << it->second << "\n";
//        }
		for (int i = 0; i < theSets; i++) {
			assert(theIndex[i].size() == (unsigned int)theAssoc);
			for (SetIter it = theIndex[i].begin(); it != theIndex[i].end(); it++) {
				IndexEntry* entry = *it;
				s << entry->key << " " << entry->value << "\n";
			}
		}
	}

	void printLog() {
		//cout << theSets << "\n";
//        for(IndexIter it = theIndex.begin(); it != theIndex.end(); it++){
//          s << it->first << " " << it->second << "\n";
//        }
		for (int i = 0; i < theSets; i++) {
			assert(theIndex[i].size() == (unsigned int)theAssoc);
			for (SetIter it = theIndex[i].begin(); it != theIndex[i].end(); it++) {
				// IndexEntry* entry = *it;
				//cout << entry->key << " " << entry->value << "\n";
			}
		}
	}

	void loadState(std::istream & s) {
		int numSets = 0;
		uint64_t key, value;
		s >> numSets;
		assert(numSets == theSets);
		for (int i = 0; i < theSets; i++) {
			for (SetIter it = theIndex[i].begin(); it != theIndex[i].end(); it++) {
				IndexEntry* entry = *it;
				s >> key >> value;
				entry->key = key;
				entry->value = value;
//              theIndex[i].push_back(new IndexEntry(key, value));
			}
		}
	}

};


struct StreamEntry {
	static const int maxBits = 8;

	uint64_t theRegionBase;
	bool isHead;
	bitset<maxBits> bits;

	StreamEntry()
		: theRegionBase(0)
		, isHead(false) {
		bits.reset();
	};

	StreamEntry(uint64_t a, bool h)
		: theRegionBase(a)
		, isHead(h) {
		bits.reset();
		bits.set(spatialOffset);
	};
	StreamEntry(uint64_t a, bool h, uint64_t b)
		: theRegionBase(a)
		, isHead(h)
		, bits(b) {
	};

	bool inRange(uint64_t anAddress, bool& prefetched) {
		//if(theRegionBase-(regionSize/2-spatialOffset)*theBlockSize <= anAddress && anAddress < theRegionBase+(regionSize/2+spatialOffset)*theBlockSize){
		if (theRegionBase <= anAddress && anAddress < (theRegionBase + regionSize * theBlockSize)) {
			prefetched = bits[getIndex(anAddress)];
			return true;
		} else {
			prefetched = false;
			return false;
		}
	};

	int getIndex(uint64_t anAddress) const {
		//int index = (anAddress - theRegionBase)/theBlockSize + (regionSize/2-spatialOffset);
		int index = (anAddress - theRegionBase) / theBlockSize;

		assert(0 <= index && index < regionSize);
		return index;
	};

	bool isSet(uint64_t anAddress) {
		int index = getIndex(anAddress);
		return bits[index];
	};
};

struct PrefetchEntry {
	uint64_t prefPtr;
	int length;

	PrefetchEntry(uint64_t p, int l) {
		prefPtr = p;
		length = l;
	};
};

struct Stream {
	uint64_t theTailPos;
	list<StreamEntry> theStreamEntries;

	Stream() {};
};

struct Ptr {
	void* theStream;
	uint64_t thePos;

	Ptr(void* aStreamIdx, const uint64_t aPos)
		: theStream(aStreamIdx)
		, thePos(aPos)
	{ };
};

struct Range {
	Ptr thePtr;
	int theLength;

	Range(void* aStream, const uint64_t aPos, int aLength)
		: thePtr(aStream, aPos)
		, theLength(aLength)
	{ };
};

class StreamStorage {
public:
	//virtual optional<StreamEntry> read(uint64_t ptr) = 0;
	virtual optional<StreamEntry> read(Range& aRange) = 0;
	virtual bool record(StreamEntry& e) = 0;
	virtual void incrementPointer(Range& aRange) = 0;
	virtual uint64_t getPtr(uint64_t theAddress) = 0;
	virtual ~StreamStorage() { }
	virtual void saveLog(std::ostream & s) = 0;
	virtual void loadState(std::istream & s) = 0;
	virtual void printLog() = 0;

};
struct StreamTracker {
	int theStreamCount;
	int theTrackerSize;
	int theLookahead;

	list<Stream*> theStreams;

	StreamTracker(int sc, int ts, int la) {
		theStreamCount = sc;
		theTrackerSize = ts;
		theLookahead = la;

		for (int i = 0; i < theStreamCount; i++) {
			theStreams.push_back(new Stream);
		}
	};

	optional<Range> lookup(uint64_t theAddress, bool& prefetched) {
		prefetched = false;

		for (list<Stream*>::iterator s = theStreams.begin(); s != theStreams.end(); s++) {
			Stream* aStream = *s;
			int n = 0;
			for (list<StreamEntry>::iterator a = aStream->theStreamEntries.begin(); a != aStream->theStreamEntries.end(); a++, n++) {
				if (a->inRange(theAddress, prefetched)) {
					if (!prefetched) continue;
					theStreams.splice(theStreams.begin(), theStreams, s);
					morteza_sab_read_cntr++;
					if ((theTrackerSize - n) < theLookahead) {
						return optional<Range>(Range(aStream, aStream->theTailPos, theLookahead - (theTrackerSize - n)));
					}
					return optional<Range>(Range(aStream, aStream->theTailPos, 0));
				}
			}
		}
		return none;
	};

	bool push_back(Ptr& aPtr, const StreamEntry& entry) {
		Stream* aStream = (Stream*)aPtr.theStream;
		aStream->theStreamEntries.pop_front();
		aStream->theStreamEntries.push_back(entry);
		return true;
	};

	Range allocate(uint64_t aPos) {
		Stream* aStream = theStreams.back();
		aStream->theStreamEntries.clear();
		aStream->theTailPos = aPos;
		StreamEntry aDummyEnt;
		for (int i = 0; i < theTrackerSize; ++i) {
			aStream->theStreamEntries.push_back(aDummyEnt);
		}
		return Range(aStream, aPos, theLookahead);
	};
};


class PIFInfiniteHistory: public StreamStorage {
	vector<StreamEntry> history;
	map<uint64_t, uint64_t> histIndex;
	typedef map<uint64_t, uint64_t>::iterator IndexIter;

public:
	PIFInfiniteHistory() {
	};

	optional<StreamEntry> read(Range& aRange) {

		if (((Stream*)aRange.thePtr.theStream)->theTailPos < history.size()) {
			StreamEntry entry = history[((Stream*)aRange.thePtr.theStream)->theTailPos];
			////cout << cycle << " Read ptr " << ((Stream*)aRange.thePtr.theStream)->theTailPos << "\n";
			return entry;
		}
		else {
			////cout << cycle << " Read ptr " << "0" << " " << ((Stream*)aRange.thePtr.theStream)->theTailPos  <<  "\n";
			return none;
		}
	};

	void incrementPointer(Range& aRange) {
		((Stream*)aRange.thePtr.theStream)->theTailPos++;
	};

	bool record(StreamEntry& e) {
		//dump();
		if (!(e.theRegionBase & ~63)) return false;

		//history.push_back(StreamEntry(theAddress, isHead));
		history.push_back(e);
		if (e.isHead) {
			//histIndex[theAddress] = history.size() - 1;
			histIndex[e.theRegionBase] = history.size() - 1;
		}
		////cout << "Record " << theAddress << " " << history.size() - 1 << " " << isHead << "\n";
		return true;
	};

	uint64_t getPtr(uint64_t theAddress) {
		if (histIndex.find(theAddress) != histIndex.end()) {
			return histIndex[theAddress];
		}
		else {
			return 0;
		}
	};
	uint64_t getNext(uint64_t ptr) {
		return ptr + 1;
	};
	void saveLog(std::ostream & s) {
		s << history.size() << "\n";
		for (vector<StreamEntry>::iterator it = history.begin(); it != history.end(); it++) {
			s << it->theRegionBase << " " << it->isHead << " " << it->bits.to_ulong() << "\n";
		}
		s << histIndex.size() << "\n";
		for (IndexIter it = histIndex.begin(); it != histIndex.end(); it++) {
			s << it->first << " " << it->second << "\n";
		}

	}

	void loadState(std::istream & s) {
		std::cerr << "History load state \n";
		int aHistorySize = 0;
		s >> aHistorySize;
//        std::cerr << "History size " << aHistorySize << std::endl;
		for (int i = 0; i < aHistorySize; i++) {
			uint64_t theAddress;
			bool isHead;
			unsigned long theBits;
			s >> theAddress >> isHead >> theBits;
//          cerr << i << " "<< theAddress << " " << isHead << " " << theBits << "\n";
			history.push_back(StreamEntry((theAddress & theBlockMask), isHead, theBits));
		}
//        std::cerr << "History load Index state \n";
		int indexSize = 0;
		s >> indexSize;
		for (int i = 0; i < indexSize; i++) {
			uint64_t theAddress, thePtr;
			s >> theAddress >> thePtr;
			histIndex[(theAddress & theBlockMask)] = thePtr;
		}
//        std::cerr << "History load state Done \n";
	}

};

class PIFCircularHistory: public StreamStorage {
	vector<StreamEntry> history;
	int historySize;
	uint64_t tail;

	map<uint64_t, uint64_t> histIndex;
	typedef map<uint64_t, uint64_t>::iterator IndexIter;

public:
	PIFCircularHistory(uint64_t size) {
		historySize = size;
		history.resize(historySize);
		tail = 0;
	};

	optional<StreamEntry> read(Range& aRange) {
		return history[((Stream*)aRange.thePtr.theStream)->theTailPos];
	};
	void incrementPointer(Range& aRange) {
		((Stream*)aRange.thePtr.theStream)->theTailPos = (((Stream*)aRange.thePtr.theStream)->theTailPos + 1) % historySize;
	};
	bool record(StreamEntry& e) {
		if (!(e.theRegionBase & ~63)) return false;

		history[tail] = e;
		if (e.isHead) {
			histIndex[e.theRegionBase] = tail;
		}
		tail = (tail + 1) % historySize;
		return true;
	};

	uint64_t getPtr(uint64_t theAddress) {
		if (histIndex.find(theAddress) != histIndex.end()) {
			return histIndex[theAddress];
		}
		else {
			return 0;
		}
	};

	uint64_t getNext(uint64_t ptr) {
		return (ptr + 1) % historySize;
	};

	void saveLog(std::ostream & s) {
		s << tail << "\n";
		s << history.size() << "\n";
		for (vector<StreamEntry>::iterator it = history.begin(); it != history.end(); it++) {
			s << it->theRegionBase << " " << it->isHead << " " << it->bits.to_ulong() << "\n";
		}
		s << histIndex.size() << "\n";
		for (IndexIter it = histIndex.begin(); it != histIndex.end(); it++) {
			s << it->first << " " << it->second << "\n";
		}

	}

	void loadState(std::istream & s) {
		std::cerr << "History load state \n";
		s >> tail;
		int aHistorySize = 0;
		s >> aHistorySize;
		assert(aHistorySize == historySize);
		for (int i = 0; i < historySize; i++) {
			uint64_t theAddress;
			bool isHead;
			unsigned long theBits;
			s >> theAddress >> isHead >> theBits;
			//cerr << theAddress << " " << isHead << " " << theBits << "\n";
			history[i] = StreamEntry((theAddress & theBlockMask), isHead, theBits);
		}
		int indexSize = 0;
		s >> indexSize;
		for (int i = 0; i < indexSize; i++) {
			uint64_t theAddress, thePtr;
			s >> theAddress >> thePtr;
			histIndex[(theAddress & theBlockMask)] = thePtr;
		}
	}
};

class PIFCircularHistoryLimitedIndex: public StreamStorage {
	vector<StreamEntry> history;
	int historySize;
	uint64_t tail;

	Index histIndex;

	typedef map<uint64_t, uint64_t>::iterator IndexIter;

public:
	PIFCircularHistoryLimitedIndex(int histSize, int indexSets, int indexAssoc):
		histIndex(indexSets, indexAssoc)
	{
		historySize = histSize;
		history.resize(historySize);
		tail = 0;
	};

	optional<StreamEntry> read(Range& aRange) {
		if (((Stream*)aRange.thePtr.theStream)->theTailPos < history.size()) {
			StreamEntry entry = history[((Stream*)aRange.thePtr.theStream)->theTailPos];
			morteza_history_read_cntr++;
			//return history[aRange.thePtr.thePos];
			return entry;
		}
		else {
			return none;
		}
	};

	void incrementPointer(Range& aRange) {
		((Stream*)aRange.thePtr.theStream)->theTailPos = (((Stream*)aRange.thePtr.theStream)->theTailPos + 1) % historySize;
	};

	bool record(StreamEntry& e) {
		if (!(e.theRegionBase & ~63)) return false;
		//if(!(theAddress & ~63)) return false;

		//history[tail] = StreamEntry(theAddress, isHead);
		history[tail] = e;
		morteza_history_write_cntr++;
		if (e.isHead) {
			//histIndex[theAddress] = tail;
			//MAX(MaxIndexSize, histIndex.size());
			morteza_index_write_cntr++;
			histIndex.insert(e.theRegionBase, tail);
		}
		tail = (tail + 1) % historySize;
		return true;
	};

	uint64_t getPtr(uint64_t theAddress) {
		optional<uint64_t> ptr = histIndex.find(theAddress);
		if (ptr) {
			return *ptr;
		} else {
			return 0;
		}
	};

	uint64_t getNext(uint64_t ptr) {
		return (ptr + 1) % historySize;
	};
	void saveLog(std::ostream & s) {
		s << tail << "\n";
		s << history.size() << "\n";
		for (vector<StreamEntry>::iterator it = history.begin(); it != history.end(); it++) {
			s << it->theRegionBase << " " << it->isHead << " " << it->bits.to_ulong() << "\n";
		}
		histIndex.saveLog(s);
	};
	void loadState(std::istream & s) {
		std::cerr << "History load state \n";
		s >> tail;
		int aHistorySize = 0;
		s >> aHistorySize;
		assert(aHistorySize == historySize);
		for (int i = 0; i < historySize; i++) {
			uint64_t theAddress;
			bool isHead;
			unsigned long theBits;
			s >> theAddress >> isHead >> theBits;
			//cerr << theAddress << " " << isHead << " " << theBits << "\n";
			history[i] = StreamEntry((theAddress & theBlockMask), isHead, theBits);
		}
		histIndex.loadState(s);
	};

	void printLog() {
		cout << tail << "\n";
		cout << history.size() << "\n";
		for (vector<StreamEntry>::iterator it = history.begin(); it != history.end(); it++) {
			cout << it->theRegionBase << " " << (it->theRegionBase >> LOG2_BLOCK_SIZE) << " " << it->isHead << " " << it->bits.to_ulong() << "\n";
		}
		// histIndex.printLog();
	};
};

class PIF_PREFETCHER {

	uint64_t statHeadFound;
	uint64_t statHeadMissing;
	uint64_t statStreamBufferHit;
	uint64_t statPrefetchEntryFound;
	uint64_t statCompactorMatch;
	uint64_t statStreamTrackerLookup;
	uint64_t statRecord;
	uint64_t statGetPointer;
	uint64_t statEnqueuePrefetch;


	uint64_t traceLineBuffer;

public:

	PIF_PREFETCHER()
	{
		statHeadFound = 0;
		statHeadMissing = 0;
		statStreamBufferHit = 0;
		statPrefetchEntryFound = 0;
		statCompactorMatch = 0;
		statStreamTrackerLookup = 0;
		statRecord = 0;
		statGetPointer = 0;
		statEnqueuePrefetch = 0;
		initialize();
	}

	bool isQuiesced() const {
		return true;
	}

	void saveState(std::string const & aDirName) {
		std::string fname( aDirName );
		fname += "/pif";
//        fname += "/pif";
		fname += ".gz";
		std::ios_base::openmode omode = std::ios::out;
		std::ofstream ofs(fname.c_str(), omode);
		boost::iostreams::filtering_stream<boost::iostreams::output> out;
		out.push(boost::iostreams::gzip_compressor(boost::iostreams::gzip_params(9)));
		out.push(ofs);
		history->saveLog(out);
	}

	void loadState(std::string const & aDirName) {
		std::string fname( aDirName );
		fname += "/pif.gz";
//        fname += "/pif";
//        fname += ".gz";
		//std::string fname ("/home/kaynak/pif_bitset/hist.gz");

		std::cerr << "PIF load state " << fname << "\n";
		std::ifstream ifs(fname.c_str());
		if (ifs.good()) {
			boost::iostreams::filtering_stream<boost::iostreams::input> in;
			in.push(boost::iostreams::gzip_decompressor());
			in.push(ifs);
			history->loadState(in);
			ifs.close();
		} else {
			assert( false );
		}
	}

	// Initialization
	void initialize(void) {
		//cout << "PIF initialize \n";
#if defined(PIF_INF)
		history = new PIFInfiniteHistory();
#elif defined(PIF_CIRC)
		history = new PIFCircularHistory(cfg.HistorySize);
#elif defined(PIF_CIRC_IND)
		int indexSets = 2 * 1024;
		int indexAssoc = 4;
		history = new PIFCircularHistoryLimitedIndex(HistorySize, indexSets, indexAssoc);
#endif
		streamTracker = new StreamTracker(theStreamCount, theTrackerSize, theLookahead);
		for (int i = 0; i < theCompactorSize; i++) {
			compactor.push_back(StreamEntry(i + 1, false));
		}
		traceLineBuffer = 0;
	}
	void finalize(void) {
	}

private:
	StreamStorage* history;
	StreamTracker* streamTracker;
	list<StreamEntry> compactor;

	list<uint64_t> thePrefetchQueue;

	//Helper functions

	void retire(uint64_t theAddress) {
		//cout << "Retire\n";
		bool isHead = false;
		bool prefetched = false;
		// cout << "Retire Address: " << theAddress << "\n";
		optional<Range> aRange = streamTracker->lookup(theAddress, prefetched);
		statStreamTrackerLookup++;

		if (!aRange) {
			//Pointer lookup
			uint64_t ptr = history->getPtr(theAddress);
			statGetPointer++;

			isHead = true;
			if (ptr) {
				statHeadFound++;
				aRange.reset(streamTracker->allocate(ptr));
			} else {
				statHeadMissing++;
			}
		}
		else {
			if (prefetched) {
				statStreamBufferHit++;
			}
		}

		if (aRange && aRange->theLength) {
			//cout << "\n\n\nLength: " << aRange->theLength << "\n";
			for (int i = 0; i < aRange->theLength; i++) {
				//cout << "i: " << i << "\n";
				//History read
				optional<StreamEntry> aPrefetchEntry = history->read(*aRange);

				if (!aPrefetchEntry) {
					assert(false);
					break;
				}
				statPrefetchEntryFound++;
				streamTracker->push_back(aRange->thePtr, *aPrefetchEntry);
				morteza_sab_write_cntr++;

				uint64_t aPrefetchAddress = aPrefetchEntry->theRegionBase;
				

				for (int j = 0; j < regionSize; j++) {
					//enqueue the prefetch addresses
					if (aPrefetchEntry->bits[j]) {
						//cout << "Prefetch address: " << (aPrefetchAddress >> LOG2_BLOCK_SIZE) << "\n";
						thePrefetchQueue.push_back(aPrefetchAddress);
						statEnqueuePrefetch++;
					} else {
#ifdef overpredict
						thePrefetchQueue.push_back(aPrefetchAddress);
						statEnqueuePrefetch++;
#endif
					}
					aPrefetchAddress += 64;
				}
				history->incrementPointer(*aRange);
			}
		}


		//Pass through the compactor
		bool evict = true;
		for (list<StreamEntry>::iterator i = compactor.begin(); i != compactor.end(); i++) {
			bool prefetched;
			if (i->inRange(theAddress, prefetched)) {
				int index = i->getIndex(theAddress);
				i->bits.set(index);
				morteza_compactor_write_cntr++;
				statCompactorMatch++;
				evict = false;
				break;
			}
		}
		if (evict) {
			StreamEntry victim = compactor.front(); //remove the least recent address from the compactor (FIFO order)
			compactor.pop_front();
			morteza_compactor_read_cntr++;
#ifndef headindex
			isHead = true;
#endif
			compactor.push_back(StreamEntry(theAddress, isHead)); //add the new address to the compactor
			morteza_compactor_write_cntr++;
			//cout << "compactor add: " << theAddress << " evict: " << victim.theRegionBase << " " << victim.bits.to_ulong() << "\n";

			//History write
			history->record(victim);
			statRecord++;
		}
	}

public:


	// Ports
	void pushRetireIn(uint64_t theAddress) {
		if (traceLineBuffer == (theAddress & theBlockMask))
			return;
		traceLineBuffer = theAddress & theBlockMask;
		retire(theAddress & theBlockMask);
	}

	uint64_t pullPrefetchOut() {
		if (!thePrefetchQueue.empty()) {
			uint64_t thePrefetchAddress = thePrefetchQueue.front();
			thePrefetchQueue.pop_front();
			return thePrefetchAddress;
		}
		else {
			return 0;
		}
	}

	void printLog() {
		history->printLog();
	}
	void getStats() {
		cout <<"morteza: start\n";
		cout <<"\nSHEET"<<endl;
		// cout << "morteza_compactor_read_cntr: "<< morteza_compactor_read_cntr << "\n";
		// cout << "morteza_compactor_write_cntr: "<< morteza_compactor_write_cntr << "\n";
		// cout << "morteza_history_read_cntr: "<< morteza_history_read_cntr << "\n";
		// cout << "morteza_history_write_cntr: "<< morteza_history_write_cntr << "\n";
		// cout << "morteza_index_read_cntr: "<< morteza_index_read_cntr << "\n";
		// cout << "morteza_index_write_cntr: "<< morteza_index_write_cntr << "\n";
		// cout << "morteza_sab_read_cntr: "<< morteza_sab_read_cntr << "\n";
		// cout << "morteza_sab_write_cntr: "<< morteza_sab_write_cntr << "\n";
		cout << "history_access_cntr : " << morteza_history_read_cntr + morteza_history_write_cntr<<endl;
		cout << "index_access_cntr : " << morteza_index_read_cntr + morteza_index_write_cntr<<endl;
		cout << "sab_access_cntr : " << morteza_sab_read_cntr + morteza_sab_write_cntr<<endl;
		cout << "compactor_access_cntr : " << morteza_compactor_read_cntr + morteza_compactor_write_cntr << "\n\n";
		cout <<"morteza: end\n";
	}
};

PIF_PREFETCHER pif = PIF_PREFETCHER();



} //End Namespace PIF

void O3_CPU::l1i_prefetcher_initialize()
{
}

void O3_CPU::l1i_prefetcher_branch_operate(uint64_t ip, uint8_t branch_type, uint64_t branch_target)
{
}

void O3_CPU::l1i_prefetcher_cache_fill(uint64_t v_addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_v_addr) {
}

void O3_CPU::l1i_prefetcher_cache_operate(uint64_t addr, uint8_t cache_hit, uint8_t prefetch_hit)
{
	nPIF::pif.pushRetireIn(addr);
}

// The actions that should be done on every cycle.
void O3_CPU::l1i_prefetcher_cycle_operate()
{

	uint64_t prefetch_line = nPIF::pif.pullPrefetchOut();
	if (prefetch_line != 0) {
		prefetch_code_line(prefetch_line);
	}
}

// print the state of the prefetcher and some counters, ignore it.
void O3_CPU::l1i_prefetcher_final_stats()
{
	cout << "\n\n\nPrinting Logs\n";
	// nMANA::MANA.printMANATables();
	nPIF::pif.getStats();
}
